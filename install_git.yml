---
- name: Install Git and Bootstrap Environment
  hosts: all
  become: yes
  vars_files:
    - vault_vars.yml
    - secrets.yml
  tasks:
    - name: Check if git is installed
      ansible.builtin.shell: command -v git
      register: git_check
      ignore_errors: true
      changed_when: false

    - name: Update apt cache
      ansible.builtin.apt:
        update_cache: yes
      when: ansible_os_family == "Debian" and git_check.failed

    - name: Install git
      ansible.builtin.package:
        name: git
        state: present
      when: git_check.failed
      register: git_install_result

    - name: Ensure zsh is installed
      ansible.builtin.package:
        name: zsh
        state: present

    - name: Check current shell for jahnke
      ansible.builtin.shell: 'getent passwd jahnke | cut -d: -f7'
      register: current_shell
      changed_when: false

    - name: Set zsh as default shell for jahnke
      ansible.builtin.user:
        name: jahnke
        shell: /usr/bin/zsh
      when: current_shell.stdout != '/usr/bin/zsh'
      register: shell_change_result

    - name: Reboot the machine if needed
      ansible.builtin.reboot:
        msg: "Rebooting machine after installing git or changing shell"
        connect_timeout: 5
        reboot_timeout: 600
        pre_reboot_delay: 0
        post_reboot_delay: 30
        test_command: whoami
      when: git_install_result.changed or shell_change_result.changed

    - name: Clone the repository
      ansible.builtin.git:
        repo: 'https://github.com/jjjahnke/chezmoi.git'
        dest: /tmp/chezmoi
        version: main
      become: yes
      become_user: jahnke

    - name: Run bootstrap script from local clone
      ansible.builtin.shell:
        cmd: /bin/bash /tmp/chezmoi/bootstrap.sh
      become: yes
      become_user: jahnke

    - name: Check if Vault server is reachable
      ansible.builtin.uri:
        url: "{{ vault_addr }}"
        method: GET
        timeout: 5
      register: vault_status
      ignore_errors: true

    - name: Get AppRole RoleID
      ansible.builtin.shell:
        cmd: vault read -format=json auth/approle/role/chezmoi-vm/role-id
      become: yes
      become_user: jahnke
      environment:
        VAULT_ADDR: "{{ vault_addr }}"
        VAULT_TOKEN: "{{ vault_token }}"
      register: role_id_result
      when: vault_status.status == 200

    - name: Generate AppRole SecretID
      ansible.builtin.shell:
        cmd: vault write -f -format=json auth/approle/role/chezmoi-vm/secret-id
      become: yes
      become_user: jahnke
      environment:
        VAULT_ADDR: "{{ vault_addr }}"
        VAULT_TOKEN: "{{ vault_token }}"
      register: secret_id_result
      when: vault_status.status == 200

    - name: Store Vault AppRole credentials on the VM
      ansible.builtin.copy:
        content: |
          ROLE_ID="{{ (role_id_result.stdout | from_json).data.role_id }}"
          SECRET_ID="{{ (secret_id_result.stdout | from_json).data.secret_id }}"
        dest: "/home/jahnke/.vault-credentials"
        owner: jahnke
        group: jahnke
        mode: '0600'
      when: vault_status.status == 200

    - name: Initialize chezmoi from repository
      ansible.builtin.shell:
        cmd: chezmoi init --apply jjjahnke/chezmoi
      become: yes
      become_user: jahnke
      environment:
        PATH: "/home/jahnke/.local/bin:{{ ansible_env.PATH }}"
        VAULT_ADDR: "{{ vault_addr }}"
        VAULT_TOKEN: "{{ vault_token }}"
      when: vault_status.status == 200
