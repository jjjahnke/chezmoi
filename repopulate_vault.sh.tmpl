#!/bin/bash
#
# This is a TEMPLATE for repopulating your HashiCorp Vault instance.
# To use it, copy this file to 'repopulate_vault.sh', which is git-ignored.
#
# DO NOT PUT SECRETS IN THIS FILE.
#
# INSTRUCTIONS:
# 1. Copy this file: `cp repopulate_vault.sh.tmpl repopulate_vault.sh`
# 2. Edit `repopulate_vault.sh` and replace all placeholder values.
# 3. Make sure you are authenticated with your Vault server (e.g., `export VAULT_TOKEN=root`).
# 4. Run the script: `bash ./repopulate_vault.sh`
#

echo "--- Repopulating Vault Secrets ---"

# --- AWS Credentials ---
echo "Writing AWS credentials..."
vault kv put secret/personal/aws/default AccessKeyID="REPLACE_WITH_DEFAULT_AWS_ACCESS_KEY_ID" SecretAccessKey="REPLACE_WITH_DEFAULT_AWS_SECRET_ACCESS_KEY" AccountID="REPLACE_WITH_DEFAULT_AWS_ACCOUNT_ID"
vault kv put secret/personal/aws/rg AccessKeyID="REPLACE_WITH_RG_AWS_ACCESS_KEY_ID" SecretAccessKey="REPLACE_WITH_RG_AWS_SECRET_ACCESS_KEY" AccountID="REPLACE_WITH_RG_AWS_ACCOUNT_ID"
vault kv put secret/personal/aws/to AccessKeyID="REPLACE_WITH_TO_AWS_ACCESS_KEY_ID" SecretAccessKey="REPLACE_WITH_TO_AWS_SECRET_ACCESS_KEY" AccountID="REPLACE_WITH_TO_AWS_ACCOUNT_ID"

# --- Kubernetes Cluster Credentials ---
echo "Writing Kubernetes credentials..."
vault kv put secret/kube/personal/gpu-server ca_crt="REPLACE_WITH_GPU_SERVER_CA_CRT" client_crt="REPLACE_WITH_GPU_SERVER_CLIENT_CRT" client_key="REPLACE_WITH_GPU_SERVER_CLIENT_KEY"

# --- API Keys ---
echo "Writing API keys..."
vault kv put secret/personal/api-keys gemini_api_key="REPLACE_WITH_GEMINI_API_KEY"
vault kv put secret/dev/api-keys github_token="REPLACE_WITH_GITHUB_TOKEN"

# --- Docker Credentials ---
# The auth token is a base64 encoding of "username:password" or "username:access_token".
# Generate it with a command like: echo -n "myuser:dckr_pat_..." | base64
echo "Writing Docker credentials..."
vault kv put secret/personal/docker auth="REPLACE_WITH_BASE64_AUTH_TOKEN"

# --- User Identity ---
echo "Writing user identity secrets..."
vault kv put secret/work/identity email="REPLACE_WITH_WORK_EMAIL"
vault kv put secret/personal/identity email="REPLACE_WITH_PERSONAL_EMAIL"
vault kv put secret/dev/identity name="REPLACE_WITH_DEV_NAME" email="REPLACE_WITH_DEV_EMAIL" gpg_key_id="REPLACE_WITH_DEV_GPG_KEY_ID"

# --- Example Secrets (from documentation) ---
# These were found in your documentation and are included here as examples.
# You may or may not need to populate them.
echo "Writing example secrets (optional)..."
vault kv put secret/kube/my-new-cluster token="REPLACE_WITH_EXAMPLE_KUBE_TOKEN"
vault kv put secret/dev/myapplication api-key="REPLACE_WITH_EXAMPLE_APP_API_KEY"
vault kv put secret/data/prod/postgres username="REPLACE_WITH_EXAMPLE_DB_USERNAME" password="REPLACE_WITH_EXAMPLE_DB_PASSWORD"


# --- Vault Policies ---
# This section creates the read-only policy that chezmoi's AppRole will use.
# It is written idempotently, meaning it overwrites the policy with the correct
# permissions every time the script is run.
echo "Writing chezmoi-readonly policy..."
vault policy write chezmoi-readonly - <<EOF
# Allow reading all secrets required by chezmoi templates.
# Note: Policies require the full API path, including '/data/'.

path "secret/data/personal/aws/default" { capabilities = ["read"] }
path "secret/data/personal/aws/rg" { capabilities = ["read"] }
path "secret/data/personal/aws/to" { capabilities = ["read"] }
path "secret/data/kube/personal/gpu-server" { capabilities = ["read"] }
path "secret/data/personal/api-keys" { capabilities = ["read"] }
path "secret/data/dev/api-keys" { capabilities = ["read"] }
path "secret/data/work/identity" { capabilities = ["read"] }
path "secret/data/personal/identity" { capabilities = ["read"] }
path "secret/data/dev/identity" { capabilities = ["read"] }
path "secret/data/personal/docker" { capabilities = ["read"] }

# Example secret paths from documentation
path "secret/data/kube/my-new-cluster" { capabilities = ["read"] }
path "secret/data/dev/myapplication" { capabilities = ["read"] }
path "secret/data/prod/postgres" { capabilities = ["read"] }
EOF


echo "--- Vault Repopulation Script Finished ---"
