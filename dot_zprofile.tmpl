# ------------------------------------------------------------------------------
# Zsh Profile - Managed by chezmoi
# ------------------------------------------------------------------------------

# --- Homebrew Initialization (macOS) ---
{{ if eq .chezmoi.os "darwin" -}}
[ -s "$(brew --prefix)/bin/brew" ] && eval "$($(brew --prefix)/bin/brew shellenv)"
{{ end -}}

# --- User-local binaries ---
export PATH="$HOME/.local/bin:$PATH"

# --- Go lang configuration ---
export PATH=$PATH:$HOME/.local/go/bin

# --- NVM configuration ---
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm

# --- pyenv configuration ---
export PYENV_ROOT="$HOME/.pyenv"
export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init --path)"
eval "$(pyenv init -)"

# --- Vault Configuration ---
export VAULT_ADDR={{ .data.vault_addr | quote }}

# --- Vault AppRole Authentication ---
# Automatically log in to Vault using AppRole credentials if they exist.
if [ -f "$HOME/.vault-credentials" ]; then
  source "$HOME/.vault-credentials"
  export VAULT_TOKEN=$(vault write -format=json auth/approle/login role_id="$ROLE_ID" secret_id="$SECRET_ID" | jq -r .auth.client_token)
fi

{{ if or (not (hasKey . "machineType")) (ne .machineType "work") -}}
# --- Personal Environment Variables ---
# Lazily load the Gemini API key from Vault if a token is available.
if [ -n "$VAULT_TOKEN" ]; then
  export GEMINI_API_KEY=$(vault kv get -format=json secret/personal/api-keys | jq -r .data.data.gemini_api_key)
fi
{{- end }}

# --- AWS SDK Configuration ---
# Tells the AWS SDK to load configuration from the ~/.aws/config file.
export AWS_SDK_LOAD_CONFIG=true

# --- macOS Terminal Colors ---
{{ if eq .chezmoi.os "darwin" -}}
# Enable colored output for tools like ls and grep.
export CLICOLOR=1
# Define the color scheme for ls.
export LSCOLORS=GxFxCxDxBxegedabagaced
{{ end -}}
